<Page
    x:Class="ClassRoomPlanner.Views.EditDistractingChildrenPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Behaviors="using:Template10.Behaviors"
    xmlns:Core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:Interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:controls="using:Template10.Controls"
    xmlns:local="using:ClassRoomPlanner.Views"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="using:ClassRoomPlanner.ViewModels"
    mc:Ignorable="d">

    <!--<Page.DataContext>
        <vm:E x:Name="ViewModel" />
    </Page.DataContext>-->

    <Page.Resources>
        <Style TargetType="Button">
     
        </Style>


        <Style TargetType="TextBox">

           
        </Style>

        <Style TargetType="TextBlock">
       
        </Style>
    </Page.Resources>
 

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
       <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"  />
            <RowDefinition Height="400"/>
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="20" />
            <ColumnDefinition Width="200" />
            <ColumnDefinition Width="200"/>
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>


        <!--<VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="AdaptiveVisualStateGroup">
                <VisualState x:Name="VisualStateNarrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NarrowMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>-->
                        <!--  TODO: change properties for narrow view  --><!--
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VisualStateNormal">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NormalMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        --><!--  TODO: change properties for normal view  --><!--
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VisualStateWide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource WideMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        --><!--  TODO: change properties for wide view  --><!--
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>


        <controls:PageHeader x:Name="pageHeader" Content="Edit Child"
                             Frame="{x:Bind Frame}"
                             Grid.Row="0"
                             Grid.ColumnSpan="4"/>

        <TextBlock Foreground="Black" Grid.Row="1" 
                  Grid.ColumnSpan="4"
                 RelativePanel.AlignLeftWithPanel="True"
                 RelativePanel.AlignTopWithPanel="True">
            <Run Text="Who Can't"/>
            <Run Text="{x:Bind ViewModel.Name}" />
            <Run Text=" sit with?"/>
            
        </TextBlock>
                 

        <StackPanel Grid.Row="2" Grid.Column="1" >
            <TextBox PlaceholderText="Search Children"
                     Margin="10"/>
            <ListView  Name="NaughtySelectionList" Height="400"
                       ItemsSource="{Binding CopyOfChildrenInClass}" 
                       SelectedItem="{Binding SelectedChild, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                       SelectionMode="Multiple"
                      >


                <Interactivity:Interaction.Behaviors>
                    <Core:EventTriggerBehavior EventName="SelectionChanged">
                        <Core:InvokeCommandAction Command="{Binding SelectionChangedCommand}"
                                      InputConverter="{StaticResource SelectionChangedConverter}"
                                      InputConverterParameter="{Binding ElementName=NaughtySelectionList}" />
                    </Core:EventTriggerBehavior>
                </Interactivity:Interaction.Behaviors>





            </ListView>
        </StackPanel>

        <StackPanel Grid.Row="2" Grid.Column="2">
            <RelativePanel Margin="10">
                <TextBlock Text="Selected" 
                           RelativePanel.AlignLeftWithPanel="True" />
                <TextBlock Text="{Binding SelectedNaughtyChildren.Count}" 
                           RelativePanel.AlignRightWithPanel="True" />
            </RelativePanel>
          
            <ListView Name="NaughytSelectedList" 
                      ItemsSource="{Binding SelectedNaughtyChildren}" Height="400" >
                <ListView.ItemTemplate>
                    <DataTemplate >
                        <RelativePanel >
                            <TextBlock Text="{Binding Name}" 
                                       RelativePanel.LeftOf="MoveBackButton"  />
                            <Button Name="MoveBackButton" 
                                    Foreground="Black"
                                    Click="MoveButton_Click" 
                                    Content="✖"  
                                    Style="{StaticResource ButtonClearStyle}" 
                                    RelativePanel.AlignRightWithPanel="True" RelativePanel.AlignTopWithPanel="True"
                                 />
                            
                                --><!--Command="{Binding ElementName=NaughytSelectedList, Path=DataContext.MoveBackCommand}"
                                    CommandParameter="{Binding Id}"
                            Come Back later with a mvvm solution to this problem!
                            --><!--

                        </RelativePanel>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </StackPanel>


        <StackPanel Grid.Row="3" 
                    Grid.Column="2"
                    Margin="10">
        <StackPanel 
                    Orientation="Horizontal">
        <TextBlock  x:Name="ChangeNameLabel" Text="Change Name :" />
        <TextBox   x:Name="ChangeNameText" PlaceholderText="New Name" />
        </StackPanel>
        <StackPanel  
                    Orientation="Horizontal">
            <Button Margin="10" 
                    Content="Cancel"
                    Foreground="Black"
                    Background="White"
                    BorderBrush="Black"
                    Click="{x:Bind ViewModel.Cancel}"/>
            <Button Content="Confirm" 
                    Background="BlueViolet"
                    Click="{x:Bind ViewModel.FinishedUpdating}"/>

        </StackPanel>
        </StackPanel>-->
    </Grid>
</Page>
